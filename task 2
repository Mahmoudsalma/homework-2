

	
	Module
Task2-1
Where
import Todo(todo)
	
	-- Ассоциативный массив на основе бинарного дерева поиска
	-- Ключи - Integer, значения - произвольного типа

 
data STree = Tip | Bin (String, Int) STree STree deriving Show
 
add (k, v) Tip = Bin (k, v) Tip Tip
add (k, v)(Bin (k1, v1) l r) = 
  if k > k1 then Bin (k1, v1) l (add (k, v) r) 
  else Bin (k1, v1) (add (k, v) l) r
 
find k Tip = Nothing 
find k (Bin (k1, v1) l r) 
  | k == k1 = Just v1
  | otherwise = find k (if k > k1 then r else l)
 
exist k = isJust . find k
 
toList Tip = []
toList( Bin (_, v1) l r) = concat [toList l, [v1], toList r]

	data TreeMap v = ChangeMe 
	
	-- Пустое дерево
	emptyTree :: TreeMap v
	emptyTree = todo
	
	-- Содержится ли заданный ключ в дереве?
	contains :: TreeMap v -> Integer -> Bool
	contains t k = todo
	
	-- Значение для заданного ключа
	lookup :: Integer -> TreeMap v -> v
	lookup k t = todo
	
	-- Вставка пары (ключ, значение) в дерево
get :: Ord key => BSTree key value -> key -> Maybe value get Leaf _ = Nothing get (Branch key value left right) k | k < key = get left k | k > key = get right k | k == key = Just value
	insert :: (Integer, v) -> TreeMap v -> TreeMap v
	insert (k, v) t = todo

data Tree k v = EmptyTree 
       | Node (k, v) (Tree k v) (Tree k v) 
       deriving (Show, Eq, Ord, Read) 

emptyTree :: (k,v) -> Tree k v 
emptyTree (k,v) = Node (k, v) EmptyTree EmptyTree 

treeInsert :: (Ord k) => (k,v) -> Tree k v -> Tree k v 
treeInsert (k,v) EmptyTree = emptyTree (k, v) 
treeInsert (a, b) (Node (k,v) left right) 
     | a == k = (Node (a,b) left right) 
     | a < k = (Node (a, b) (treeInsert (a, b) left) right) 
     | a > k = (Node (a, b) left (treeInsert (a, b) right)) 

	
	-- Удаление элемента по ключу
	remove :: Integer -> TreeMap v -> TreeMap v
	remove i t = todo
remove :: Integer -> TreeMap -> TreeMap
remove i EmptyTreeMap = error "TreeMap is empty"
remove i leaf@(Leaf (k, v)) | i == k = EmptyTreeMap
                            | otherwise = leaf
remove i (Node (a,b) l r) | i == a = replace l r
                          | i >  a = (Node (a, b) l (remove i r))
                          | i <  a = (Node (a, b) (remove i l) r)
replace EmptyTreeMap x = x
replace (Leaf (a, b)) x = (Node (a, b) EmptyTreeMap x)
replace (Node (a, b) l r) x = (Node (a, b) l replace (r x))
-- Поиск ближайшего снизу ключа относительно заданного
nearestLE :: Integer -> TreeMap -> (Integer, v)
nearestLE i EmptyTreeMap = todo

	
	-- Поиск ближайшего снизу ключа относительно заданного
	nearestLE :: Integer -> TreeMap v -> (Integer, v)
	nearestLE i t = todo
nearestGE :: BinaryTree -> Integer -> Integer
nearestGE t k = get t 0
    where get Leaf p = p
          get (Branch key left right) p
            | k < key  = get left  key
            | k > key  = get right p
            | otherwise = k
 
insert :: BinaryTree -> Integer -> BinaryTree

	
	
-- Построение дерева из списка пар
	treeFromList :: [(Integer, v)] -> TreeMap v
	treeFromList lst = todo
data Tree k v = EmptyTree 
                | Node (k, v) (Tree k v) (Tree k v)
                deriving (Show, Eq, Ord, Read)

emptyTree :: (k,v) -> Tree k v  
emptyTree (k,v) = Node (k, v) EmptyTree EmptyTree

treeInsert :: (Ord k) => (k,v) -> Tree k v -> Tree k v
treeInsert (k,v) EmptyTree = emptyTree (k, v)
treeInsert (a, b) (Node (k,v) left right) 
        | a == k = (Node (a,b) left right)
        | a < k = (Node (a, b) (treeInsert (a, b) left) right)   
        | a > k = (Node (a, b) left (treeInsert (a, b) right))

	
	-- Построение списка пар из дерева
	listFromTree :: TreeMap v -> [(Integer, v)]
	listFromTree t = todo
listFromTree EmptyTreeMap = []
		listFromTree (Leaf (k, v)) = [(k, v)]
		listFromTree (Node (k, v) l r) = listFromTree l ++ [(k, v)] ++ listFromTree r

	
	-- Поиск k-той порядковой статистики дерева 
	kMean :: Integer -> TreeMap v -> (Integer, v)
	kMean i t = todo

module Task2_2 where
	
	import Todo(todo)
	
	import Prelude hiding (foldl, foldr, unfoldr, map, concatMap, 
	    filter, maxBy, minBy, reverse, sum, product, elem)
	
	foldl :: (b -> a -> b) -> b -> [a] -> b
	foldl = todo
	
	foldr :: (a -> b -> b) -> b -> [a] -> b
	foldr = todo
	
	unfoldr :: (b -> Maybe (a, b)) -> b -> [a]
	unfoldr = todo
	
	-- Сумма всех элементов списка (пример)
      data Adder a = Adder a Int
         instance Monad Adder where
                      return x = Adder x 0
             (Adder x s) >>= f  = let Adder x' s' = f x
                                    in Adder x' (s + s')
                      toAdder x = Adder x x
                   sum' xs = let Adder _ s = mapM toAdder xs in s
                        main = print $ sum' [1..100]
             
	sum :: [Integer] -> Integer
	sum lst = foldl (+) 0 lst
	
	-- Переворот списка (Пример)
	reverse :: [a] -> [a]
	reverse lst = foldl f [] lst where f t h = h:t
Node *reverse_list(Node *list)
{
  Node *reversed_list = NULL;

  for (Node *node = list, *next_node; node != NULL; node = next_node)
  {
    next_node = node->next;
    node->next = reversed_list;
    reversed_list = node;
  }

  return reversed_list;
}

	
	-- Отображение элементов списка
	map :: (a -> b) -> [a] -> [b]
	map = todo
	
	-- Произведение всех элементов списка
	product :: [Integer] -> Integer
	product = todo
	
	-- Выделение из списка Maybe всех существующих значений
	catMaybes :: [Maybe a] -> [a]
	catMaybes = todo
	
	-- Диагональ матрицы
	diagonal :: [[a]] -> [a]
	diagonal = todo
	
	-- Фильтр для всех элементов, не соответствующих предикату
	filterNot :: (a -> Bool) -> [a] -> [a]
	filterNot = todo
	
	-- Поиск элемента в списке
	elem :: (Eq a) => a -> [a] -> Bool
	elem = todo
	
	-- Список чисел в диапазоне [from, to) с шагом step
	rangeTo :: Integer -> Integer -> Integer -> [Integer]
	rangeTo from to step = todo
	
	-- Конкатенация двух списков
	append :: [a] -> [a] -> [a]
	append = todo
	
	-- Разбиение списка lst на куски размером n
	-- (последний кусок может быть меньше)
	groups :: [a] -> Integer -> [[a]]
	groups lst n = todo



















